#############################
# Title: InstanceMetadataRemediation
# Purpose: This cfn creates a lambda function that is invoked on a hourly basis. 
# The Lambda function queries all ec2 instances that are not enforcing IMDSv2 (http-token = required).
# It then loops thru and sets IMDS-Hops limit to the value in IMDS-Hops tag or to 1 if the tag does not exist.
# It will omit instances with the tag 'EnableIMDSv1' if that is required for proper functionality.
# Author: Matthew Venne
# Company: stackArmor
# July 9, 2021
##############################
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InstanceMetadataLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: EC2_Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - ec2:DescribeInstances
                  - ec2:ModifyInstanceMetadataOptions
                Resource: '*'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  InstanceMetadataLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code: 
        ZipFile: |
          import json
          import boto3

          ec2 = boto3.client('ec2')
          imds_hops_key='IMDS-Hops'
          key_to_find='EnableIMDSv1'

          def lambda_handler(event, context):
              instances = ec2.describe_instances()
              for reservation in instances['Reservations']:
                  for instance in reservation['Instances']:
                      if key_to_find not in [tag['Key'] for tag in instance['Tags']]:
                          if imds_hops_key not in [tag['Key'] for tag in instance['Tags']]:
                              if instance['MetadataOptions']['HttpTokens']=='optional':
                                  print('Metadata v1 disabled on ' +instance['InstanceId'] +'Hops limit set to default value of 1')
                                  ec2.modify_instance_metadata_options(
                                      InstanceId=instance['InstanceId'],
                                      HttpTokens='required',
                                      HttpPutResponseHopLimit=1,
                                      HttpEndpoint='enabled'
                                      )
                          elif imds_hops_key in [tag['Key'] for tag in instance['Tags']]:
                              for tag in instance['Tags']:
                                  if tag['Key']==imds_hops_key:
                                      hops=tag['Value']
                              if instance['MetadataOptions']['HttpTokens']=='optional' and instance['MetadataOptions']['HttpPutResponseHopLimit']!=hops:   
                                  print('Metadata v1 disabled on ' +instance['InstanceId']+' Hops limit set to value in tag')
                                  ec2.modify_instance_metadata_options(
                                  InstanceId=instance['InstanceId'],
                                  HttpTokens='required',
                                  HttpPutResponseHopLimit=int(hops),
                                  HttpEndpoint='enabled'
                                  )

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Principal: events.amazonaws.com
      Action: lambda:InvokeFunction
      FunctionName: !Ref InstanceMetadataLambda
      SourceArn: !GetAtt CWRule.Arn
  CWRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "InstanceMetadataLambdaRule"
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "InstanceMetadataLambda"
              - "Arn"
          Id: "TargetFunctionV1"

